---
  - include_vars: vaulted.yml
    tags:
      - test

  - name: Disable SELinux
    selinux: state=disabled

  - name: Set MariaDB repo
    copy: src=mariadb.repo dest=/etc/yum.repos.d/mariadb.repo mode=644

  - name: enable repo and install galera, mariadb-client and mariadb-server
    command: yum --enablerepo=mariadb -y install MariaDB-Galera-server MariaDB-client galera

  - name: Install MariaDB add-ons (mysql-pyhon, php-mysql, php-pear)
    yum: pkg={{ item }} state=present
    with_items:
      - MySQL-python
      - php-mysql
      - php-pear

  - name: config for easy access as root user
    template: src=my-cnf.j2 dest=~/.my.cnf owner=root mode=644

  - name: copy server.cnf to its location
    template: src=server.cnf.j2 dest=/etc/my.cnf.d/server.cnf owner=root mode=0600

  - name: make rc.local executable
    command: sudo chmod u+x /etc/rc.d/rc.local
    tags:
      - test

  - name: make master run sudo /usr/bin/mysqld_safe --wsrep-new-cluster on startup
    lineinfile: dest=/etc/rc.d/rc.local line="/usr/bin/mysqld_safe --wsrep-new-cluster"
    when: (ansible_all_ipv4_addresses[0]) == '10.0.103.37'
    tags:
      - test

  - name: Ceate systemd /etc/systemd/system/mysqld.service
    copy: src=mysqld.service dest=/etc/systemd/system/mysqld.service mode=644
    when: (ansible_all_ipv4_addresses[0]) != '10.0.103.37'
    tags:
      - test

# Continue with the following :
#   1. On the master run :
#   sudo /etc/rc.d/init.d/mysql bootstrap
#   sudo mysql_secure_installation

#   2. on the slave run :
#     sudo systemctl start mysql # sometimes require to ssh, run it, exist ssh, and redo

#   3. check:
#     show status like 'wsrep_%';

#   4. copy mysql dump file (all databases) to mariadb master
#      scp all_tables.sql <master>:/template
#
#   5. import :
#      mysql < all_tables.sql
#   6. ONLY ON THE SLAVES !!! (the master uses /etc/rc.d/rc.local to autostart [/usr/bin/mysqld_safe --wsrep-new-cluster])
#      sudo systemctl enable mysqld.service

#  - name: restarting mysql's
#    service: name=mysql state=started enabled=yes
#    when: (ansible_all_ipv4_addresses[0]) == '{{ mysql_2 }}'

#  - name: restarting mysql's
#    service: name=mysql state=started enabled=yes
    #when: (ansible_all_ipv4_addresses[0]) == '{{ mysql_2 }}'

#  - name: configuring users on mysql # this can run only once since there's no root password yet...after this, a password will be set and it will fail
#    mysql_user: name={{ mysql_user }} password={{ mysql_pass }} host="%" priv=*.*:ALL state=present
#    tags:
#      - test


#  - name: upgrade all packages
#    yum: name=* state=latest



  #- name: Start sql service and enable the service
  #  service: name=mysql state=started enabled=yes
